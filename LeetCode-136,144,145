class Solution {
/*
136.只出现一次的数字
给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。
*/
  public int singleNumber(int[] nums) {
    int ans = 0;
    for(int i = 0; i < nums.length; i++) {
      ans ^= nums[i];
    }
    return ans;
  }
/*
144.二叉树的前序遍历
给你二叉树的根节点 root ，返回它节点值的 前序 遍历。
morris前序遍历
*/
  class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if (root == null) {
            return res;
        }

        TreeNode p1 = root, p2 = null;

        while (p1 != null) {
            p2 = p1.left;
            if (p2 != null) {
                while (p2.right != null && p2.right != p1) {
                    p2 = p2.right;
                }
                if (p2.right == null) {
                    res.add(p1.val);
                    p2.right = p1;
                    p1 = p1.left;
                    continue;
                } else {
                    p2.right = null;
                }
            } else {
                res.add(p1.val);
            }
            p1 = p1.right;
        }
        return res;
    }
}
//作者：力扣官方题解
//链接：https://leetcode.cn/problems/binary-tree-preorder-traversal/solutions/461821/er-cha-shu-de-qian-xu-bian-li-by-leetcode-solution/
//来源：力扣（LeetCode）
//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

/*
145.二叉树的后序遍历
给你一棵二叉树的根节点 root ，返回其节点值的 后序遍历 
*/

  public List<Integer> postorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList<Integer>();
      if (root == null) {
          return res;
      }

      TreeNode p1 = root, p2 = null;

      while (p1 != null) {
          p2 = p1.left;
          if (p2 != null) {
              while (p2.right != null && p2.right != p1) {
                  p2 = p2.right;
              }
              if (p2.right == null) {
                  p2.right = p1;
                  p1 = p1.left;
                  continue;
              } else {
                  p2.right = null;
                  addPath(res, p1.left);
              }
          }
          p1 = p1.right;
      }
      addPath(res, root);
      return res;
  }

  public void addPath(List<Integer> res, TreeNode node) {
      int count = 0;
      while (node != null) {
          ++count;
          res.add(node.val);
          node = node.right;
      }
      int left = res.size() - count, right = res.size() - 1;
      while (left < right) {
          int temp = res.get(left);
          res.set(left, res.get(right));
          res.set(right, temp);
          left++;
          right--;
      }
  }


//作者：力扣官方题解
//链接：https://leetcode.cn/problems/binary-tree-postorder-traversal/solutions/431066/er-cha-shu-de-hou-xu-bian-li-by-leetcode-solution/
//来源：力扣（LeetCode）
//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
}
